// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KindredSDKCore
import CommonCrypto
import CoreTelephony
import CryptoKit
import Foundation
@_exported import KindredSDKCore
import Swift
import UIKit
import _Concurrency
public struct InjectedValues {
}
extension KindredSDKCore.InjectedValues {
  public var dealsService: KindredSDKCore.DealsServiceProtocol {
    get
    set
  }
  public var settings: KindredSDKCore.CoreSettingsProtocol {
    get
    set
  }
  public var oneTimeLinkService: KindredSDKCore.OneTimeLinkServiceProtocol {
    get
    set
  }
  public var userService: KindredSDKCore.UserServiceProtocol {
    get
    set
  }
  public var authenticationService: KindredSDKCore.AuthenticationServiceProtocol {
    get
    set
  }
  public var analyticsService: KindredSDKCore.AnalyticsServiceProtocol {
    get
    set
  }
  public var apiSettings: KindredSDKCore.ApiSettingsProtocol {
    get
    set
  }
}
@propertyWrapper public struct Injected<T> {
  public var wrappedValue: T {
    get
    set
  }
  public init(_ keyPath: Swift.WritableKeyPath<KindredSDKCore.InjectedValues, T>)
}
@_inheritsConvenienceInitializers @objc public class InjectedCore : ObjectiveC.NSObject {
  @objc public static var settings: KindredSDKCore.CoreSettingsProtocol {
    @objc get
  }
  @objc public static var dealsService: KindredSDKCore.DealsServiceProtocol {
    @objc get
  }
  @objc public static var oneTimeLinkService: KindredSDKCore.OneTimeLinkServiceProtocol {
    @objc get
  }
  @objc public static var userService: KindredSDKCore.UserServiceProtocol {
    @objc get
  }
  @objc public static var authenticationService: KindredSDKCore.AuthenticationServiceProtocol {
    @objc get
  }
  @objc public static var analyticsService: KindredSDKCore.AnalyticsServiceProtocol {
    @objc get
  }
  @objc public static var apiSettings: KindredSDKCore.ApiSettingsProtocol {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public protocol InjectionKey {
  associatedtype Value
  static var currentValue: Self.Value { get set }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class CoreConfiguration : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ImageDownloader : ObjectiveC.NSObject {
  @objc public static func downloadImage(url: Foundation.URL) -> UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol DealsServiceProtocol : ObjectiveC.NSObjectProtocol {
  @objc func searchForDeals(searchTerm: Swift.String, completionHandler: @escaping ([KindredSDKCore.Deal]?, KindredSDKCore.KindredCoreError?) -> Swift.Void)
  @objc func getDealUniqueTrackingLink(for dealID: Swift.String, analytics: [Swift.String : Swift.AnyObject], completionHandler: @escaping (KindredSDKCore.DealClick?, KindredSDKCore.KindredCoreError?) -> Swift.Void)
  @objc func getDealUniqueTrackingLink(for dealID: Swift.String, completionHandler: @escaping (KindredSDKCore.DealClick?, KindredSDKCore.KindredCoreError?) -> Swift.Void)
}
@objc public protocol OneTimeLinkServiceProtocol {
  @objc func getOnetimeAuthenticationId(completionHandler: @escaping (Swift.String?, KindredSDKCore.KindredCoreError?) -> Swift.Void)
}
@objc public protocol UserServiceProtocol {
  @objc func setDonationCharity(charityID: Swift.String, charityShare: Swift.Int, completionHandler: @escaping (Swift.Bool, KindredSDKCore.KindredCoreError?) -> Swift.Void)
}
@objc public protocol AuthenticationServiceProtocol {
  @objc func authenticateSDK(completionHandler: @escaping (Swift.Bool, KindredSDKCore.KindredCoreError?) -> Swift.Void)
}
@objc public protocol AnalyticsServiceProtocol {
  @objc func setLastActivityCheck(completionHandler: @escaping (Swift.Bool, KindredSDKCore.KindredCoreError?) -> Swift.Void)
}
public struct CoreConstants {
  public struct CoreKeys {
    public static let kkAccessToken: Swift.String
    public static let kkRefreshToken: Swift.String
    public static let kkUserId: Swift.String
    public static let kkSDKMode: Swift.String
    public static let kkDeviceId: Swift.String
    public static let kkUserCurrency: Swift.String
    public static let kkUserCountry: Swift.String
    public static let kkCharityId: Swift.String
    public static let kkCharityShare: Swift.String
    public static let kkLastActiveCheck: Swift.String
    public static let kkCouponsOnly: Swift.String
  }
}
@_inheritsConvenienceInitializers @objc public class CoreAppSettings : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum APIError : Swift.Error {
  case networkError
  case parsingError
  case tokenExpire
  public static func == (a: KindredSDKCore.APIError, b: KindredSDKCore.APIError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class Analytics : ObjectiveC.NSObject {
  public func getClickAnalytics(countryCode: Swift.String, model: Swift.String, carrier: Swift.String, browser: Swift.String?) -> [Swift.String : Swift.AnyObject]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DealClick : ObjectiveC.NSObject, Swift.Decodable {
  @objc public var link: Swift.String? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class Deal : ObjectiveC.NSObject, Swift.Codable {
  @objc public var dealId: Swift.String {
    get
  }
  @objc public var storeName: Swift.String {
    get
  }
  @objc public var cashback: Swift.Float {
    get
  }
  @objc public var cashbackType: Swift.String {
    get
  }
  @objc public var currency: Swift.String? {
    get
  }
  @objc public var logo: Swift.String? {
    get
  }
  @objc public var codes: [KindredSDKCore.CouponCodes]? {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class CouponCodes : ObjectiveC.NSObject, Swift.Codable {
  @objc public var code: Swift.String {
    get
  }
  @objc public var summary: Swift.String {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KindredCoreError : ObjectiveC.NSObject {
  @objc public var errorType: KindredSDKCore.KindredCoreError.ErrorType {
    get
  }
  @objc public enum ErrorType : Swift.Int {
    case oneTimeIdError
    case sdkAuthenticationError
    case dealSearchError
    case dealActivationError
    case setAnalyticsCheckError
    case setCharityError
    case noUserId
    case noError
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc convenience public init(errorType: KindredSDKCore.KindredCoreError.ErrorType)
  @objc deinit
}
@objc extension KindredSDKCore.KindredCoreError : Foundation.LocalizedError {
  @objc dynamic public var errorDescription: Swift.String? {
    @objc get
  }
}
@objc public protocol CoreSettingsProtocol : ObjectiveC.NSObjectProtocol {
  @objc func saveSetting(obj: Any, key: Swift.String)
  @objc func getSetting(key: Swift.String, defaultValue: Swift.String?) -> Swift.String
  @objc func getSettingBool(key: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
  @objc func getSettingInt(key: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  @objc func getSettingArray(key: Swift.String) -> [Swift.String]
  @objc func getSettingData(key: Swift.String) -> Foundation.Data?
  @objc func removeSettings(key: Swift.String)
  @objc func setUserId(userId: Swift.String)
  @objc func getUserId() throws -> Swift.String
  @objc func getUserCurrency() -> Swift.String
  @objc func getUserCurrencyFromLocale() -> Swift.String?
  @objc func getUserCountry() -> Swift.String
  @objc func getUserCountryByTelephony() -> Swift.String?
  @objc func setStandardUserCountry()
  @objc func setStandardUserCurrency()
  @objc func dealsSearchRequest() -> Swift.String
  @objc func activateDealRequest() -> Swift.String
  @objc func isSDKMode() -> Swift.Bool
  @objc func getDeviceId() -> Swift.String?
  @objc func setCouponsOnly(value: Swift.Bool)
  @objc func isCouponsOnly() -> Swift.Bool
  @objc func isValueSet(key: Swift.String) -> Swift.Bool
}
@objc public protocol ApiSettingsProtocol {
  @objc func setup(configuration: KindredSDKCore.CoreConfiguration)
  @objc func getBaseUrl(path: Swift.String?) -> Swift.String
  @objc func getImageUrl(path: Swift.String) -> Swift.String
  @objc func getImageUrl(path: Swift.String, parameters: [Swift.String : Swift.String]) -> Foundation.URL?
  @objc func getCoreConfiguration() -> KindredSDKCore.CoreConfiguration?
}
extension KindredSDKCore.APIError : Swift.Equatable {}
extension KindredSDKCore.APIError : Swift.Hashable {}
extension KindredSDKCore.KindredCoreError.ErrorType : Swift.Equatable {}
extension KindredSDKCore.KindredCoreError.ErrorType : Swift.Hashable {}
extension KindredSDKCore.KindredCoreError.ErrorType : Swift.RawRepresentable {}
